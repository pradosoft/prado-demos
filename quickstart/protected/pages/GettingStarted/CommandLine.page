<com:TContent ID="body" >
<h1>Command Line Tool</h1>

<p class="block-content">The optional <tt>prado-cli.php</tt> PHP script file in the <tt>bin</tt>
directory provides command line tools to perform various tedious takes in Prado.
The <tt>prado-cli.php</tt> can be used to create Prado project skeletons, create
initial test fixtures, and access to an interactive PHP shell.
</p>
<h2>Requirements</h2>
<p class="block-content">
To use the command line tool, you need to use your command prompt, command console
or terminal. In addition, PHP must be able to execute PHP scripts from
the command line.
</p>

<h2>Usage</h2>
<p class="block-content">
Inside you application's protected directory, If you type <tt>./vendor/bin/prado-cli</tt>,
you should see the following information.</p>
<com:TTextHighlighter Language="cli" CssClass="source block-content cli">
  Command line tools for Prado 4.2.0.
usage: php prado-cli.php command[/action] <parameter> [optional]

example: php prado-cli.php cache/flush-all
example: prado-cli help
example: prado-cli cron/tasks

The following options are available:
  -d=<folder>       Loads the configuration.xml/php from <folder>
  -q=<level>        Quiets the output to <level> [1..3]

The following commands are available:
 - cache                       Allows you to flush the cache(s).
     cache/index               Displays the cache modules that can be flushed.
     cache/flush               Flushes the specified ICache modules.
     cache/flush-all           Flushes all application ICache modules.

 - help                        Provides help information about shell commands.
     help/index                Displays available commands or detailed command information.

 - shell                       Provides PHP Interactive Shell Interpreter.
     shell/index               Runs a PHP interactive interpreter after Initializing the Prado application.

 - activerecord                Provides Active Record skeleton generation.
     activerecord/generate     Generate Active Record skeleton for <table> to <output>. May also generate [soap] properties.
     activerecord/generate-all Generate Active Record skeleton for all Tables to <output>. May also generate [soap] properties.
                               Generated Classes are named like the Table with optional [Prefix] and/or [Suffix].
                               [Overwrite] is used to overwrite existing Files.

To see the help of each command, enter:

  prado-cli help <command-name>
</com:TTextHighlighter>

<p class="block-content">The <b>&lt;parameter&gt;</b> are required parameters and <b>[optional]</b>
are optional parameters. </p>

<h2>Interactive Shell</h2>
<p class="block-content">
The interactive shell allows you to evaluate PHP statements from the command line.
The <tt>prado-cli.php</tt> script can be used to start the shell and load an existing
Prado project. For example, let us load the blog demo project. Assume that your
command line is in the <tt>prado</tt> distribution directory and you type.
</p>
<p class="block-content">
<com:TTextHighlighter Language="cli" CssClass="source block-content cli">
$: php bin/prado-cli.php shell demos/blog
</com:TTextHighlighter>
The output should be
<com:TTextHighlighter Language="cli" CssClass="source block-content cli">
  Command line tools for Prado 4.2.0.
Psy Shell v0.11.2 (PHP 7.4.28 â€” cli) by Justin Hileman
>>>
</com:TTextHighlighter>
Then we will get an instance of the Prado blog application, and from
that instance we want an instance of the <tt>'data'</tt> module.

<com:TTextHighlighter Language="cli" CssClass="source block-content cli">
>> $app = Prado::getApplication();

>> $db = $app->getModule('data');
</com:TTextHighlighter>
Lastly, we want to use the data module to query for a post with <tt>ID=1</tt>. Notice that
we <b>leave out the semicolon</b> to show the results.
<com:TTextHighlighter Language="cli" CssClass="source block-content cli">
>> $db->queryPostByID(1)
</com:TTextHighlighter>
There should not be any errors and you should see the following.
<com:TTextHighlighter Language="cli" CssClass="source block-content cli">
PostRecord#1
(
    [ID] => 1
    [AuthorID] => 1
    [AuthorName] => 'Prado User'
    [CreateTime] => 1148819691
    [ModifyTime] => 0
    [Title] => 'Welcome to Prado Weblog'
    [Content] => 'Congratulations! You have successfully installed Prado Blog --
 a PRADO-driven weblog system. A default administrator account has been created.
 Please login with <b>admin/prado</b> and update your password as soon as possible.'
    [Status] => 0
    [CommentCount] => 0
)
</com:TTextHighlighter>
</p>

<h2>Creating Active Record Classes</h2>
<p class="block-content">
In the blog demo project, we need to create two <a href="?page=Database.ActiveRecord">Active Record</a> classes, <tt>UserRecord</tt> and <tt>PostRecord</tt>, to represent data records in the <tt>users</tt> and <tt>posts</tt> tables, respectively. Active Record classes must extend from the base class <tt>ActiveRecord</tt>, and must define property names that matches with the field names of the corresponding table.
</p>

<p class="block-content">
To better organize our directories, we create a new directory <tt>protected/database</tt> to hold the class files. We also modify our application configuration by inserting the following lines. It is equivalent to adding the directory <tt>protected/database</tt> to PHP include_path, which allows us to use the classes without explicitly including them.
</p>

<com:TTextHighlighter CssClass="source block-content" Language="xml">
<paths>
  <using namespace="Application.database.*" />
</paths>
</com:TTextHighlighter>

<p class="block-content">
At the prompt, enter the following two commands to create <tt>UserRecord</tt> and <tt>PostRecord</tt> classes:
</p>

<com:TTextHighlighter CssClass="source cli" Language="text">
>> generate users Application.database.UserRecord

>> generate posts Application.database.PostRecord
</com:TTextHighlighter>

<p class="block-content">
Here we used the <a href="?page=Fundamentals.Components1">namespace format</a> again to specify the classes to be created. The path <tt>Application.database.UserRecord</tt> indicates that we want the <tt>UserRecord</tt> class file to be <tt>protected/database/UserRecord.php</tt>.
</p>

</com:TContent>
