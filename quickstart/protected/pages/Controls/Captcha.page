<com:TContent ID="body" >

<h1>TCaptcha</h1>
<com:DocLink ClassPath="Prado.Web.UI.WebControls.TCaptcha" />

<p class="block-content">
<tt>TCaptcha</tt> displays a <a href="http://en.wikipedia.org/wiki/Captcha">CAPTCHA</a> that can be used to determine if the input is entered by a real user instead of some program. <tt>TCaptcha</tt> displays a token (a string consisting of alphanumeric characters) as an image and the user is expected to repeat the token in a text box. The token image is generated in a way such that it can be recognized by a human being, but not a program.
</p>

<p class="block-content">
To use <tt>TCaptcha</tt>, you must enable the PHP GD2 extension with TrueType font support. Unlike other CAPTCHA scripts, <tt>TCaptcha</tt> does not need session or cookie.
</p>

<p class="block-content">
The token generated by <tt>TCaptcha</tt> can be configured in several ways. To specify the length of characters in the token, set <tt>MinTokenLength</tt> and <tt>MaxTokenLength</tt>. To use case-insensitive token comparison and generate upper-case-only token, set <tt>CaseSensitive</tt> to false. More advanced users can try to set <tt>TokenAlphabet</tt> to specify which characters may appear in the generated tokens.
</p>

<p class="block-content">
The validation of the token is related with two properties: <tt>TestLimit</tt> (defaults to 5 times) and <tt>TokenExpiry</tt> (defaults to 600 seconds). The former specifies how many times a token can be tested with on the server side, and the latter says when a generated token will expire. If the validation fails in any of the two scenarios, a new token will be automatically generated.
</p>

<p class="block-content">
To specify the appearance of the generated token image, set <tt>TokenImageTheme</tt> to be an integer between 0 and 63. You may try the following example to see how this value affects the generated token image. The size of the generated token image is determined by <tt>TokenFontSize</tt>. In particular, the image width is proportional to the font size. You may also set <tt>Width</tt> to scale the generated image to your desired size, but the scaled image may not look good. By setting <tt>ChangingTokenBackground</tt> to true, the image background of the token will be variating even though the token is the same during postbacks.
</p>

<p class="block-content">
Upon postback, user input can be validated by calling the method <tt>TCaptcha.validate()</tt>. More easily, you can use a <tt>TCaptchaValidator</tt> to automate the validation work for you. The <tt>TCaptchaValidator</tt> has the additional benefit of being able to validate the user input on the client-side. By default, a generated token will remain unchanged during postbacks. A new token can be generated by calling <tt>TCaptcha.regenerateToken()</tt> manually.
</p>

<p class="block-content">
The following template shows a typical use of the <tt>TCaptcha</tt> control:
</p>
<com:TTextHighlighter Language="prado" CssClass="source block-content">
&lt;com:TCaptcha ID="Captcha" />
&lt;com:TTextBox ID="Input" />
&lt;com:TCaptchaValidator CaptchaControl="Captcha"
                          ControlToValidate="Input"
                          ErrorMessage="You are challenged!" />
</com:TTextHighlighter>

<com:RunBar PagePath="Controls.Samples.TCaptcha.Home" />

</com:TContent>
